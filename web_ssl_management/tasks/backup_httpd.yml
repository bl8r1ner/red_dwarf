# - name: Backup existing httpd certificates
---

- name: Set base web server-specific variables
  ansible.builtin.set_fact:
    ssl_conf_dir: "{{ web_server_config.httpd.ssl_conf_dir }}"

- name: Find all SSL config files in directory
  ansible.builtin.find:
    paths: "{{ ssl_conf_dir }}"
    patterns: "*.conf"
    file_type: file
  register: ssl_conf_files
  when: ssl_conf_dir is defined

- name: Read SSL config files
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  loop: "{{ ssl_conf_files.files | default([]) }}"
  register: ssl_conf_contents
  when: ssl_conf_files.files is defined and ssl_conf_files.files | length > 0
  ignore_errors: true

- name: Extract SSL file paths from all config files
  ansible.builtin.set_fact:
    ssl_paths: "{{ combined_content | regex_findall('(?m)^(SSLCertificateFile|SSLCertificateKeyFile)\\s+(.+)$') | map('last') | list }}"
  vars:
    combined_content: "{{ ssl_conf_contents.results | select('succeeded') | map(attribute='content') | map('b64decode') | join('\n') }}"
  when: ssl_conf_contents.results is defined and ssl_conf_contents.results | select('succeeded') | list | length > 0

- name: Set certificate and key paths
  ansible.builtin.set_fact:
    existing_cert_file: "{{ (ssl_paths | select('match', '.\\.crt$') | first) | default(cert_dir ~ '/' ~ ansible_fqdn ~ '.crt') }}"
    existing_key_file: "{{ (ssl_paths | select('match', '.\\.key$') | first) | default(key_dir ~ '/' ~ ansible_fqdn ~ '.key') }}"
  vars:
    cert_dir: "{{ web_server_config.httpd.cert_dir }}"
    key_dir: "{{ web_server_config.httpd.key_dir }}"

- name: Get stats of existing httpd certificates on {{ ansible_fqdn }}
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - "{{ existing_cert_file }}"
    - "{{ existing_key_file }}"
  register: existing_stats

- name: Backup existing httpd certificates on {{ ansible_fqdn }}
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ backup_dir }}/{{ item.path | basename }}.bkp_{{ ansible_date_time.iso8601_basic_short }}"
    remote_src: true
    mode: "{{ item.mode }}"
  loop:
    - { path: "{{ existing_stats.results[0].stat.path }}", mode: '0644' }
    - { path: "{{ existing_stats.results[1].stat.path }}", mode: '0600' }
  when: existing_stats.results[0].stat.exists and existing_stats.results[1].stat.exists
