# - name: Backup existing httpd certificates
---
- name: Extract SSL file paths from httpd config
  ansible.builtin.set_fact:
    ssl_paths: "{{ lookup('file', web_server_config.httpd.ssl_conf) | regex_findall('^(SSLCertificateFile|SSLCertificateKeyFile)\s+(.+)$', multiline=true) | map('last') | list }}"
  when: web_server_config.httpd.ssl_conf is defined

- name: Set certificate and key paths
  ansible.builtin.set_fact:
    existing_cert_file: "{{ (ssl_paths | select('match', '.\.crt$') | reject('match', 'localhost\.crt$') | first) | default(cert_dir ~ '/' ~ ansible_fqdn ~ '.crt') }}"
    existing_key_file: "{{ (ssl_paths | select('match', '.\.key$') | reject('match', 'localhost\.key$') | first) | default(key_dir ~ '/' ~ ansible_fqdn ~ '.key') }}"
  vars:
    cert_dir: "{{ web_server_config.httpd.cert_dir }}"
    key_dir: "{{ web_server_config.httpd.key_dir }}"

- name: Get stats of existing httpd certificates
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - "{{ existing_cert_file }}"
    - "{{ existing_key_file }}"
  register: existing_stats

- name: Backup existing httpd certificates
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ backup_dir }}/{{ item.path | basename }}.bkp_{{ ansible_date_time.iso8601_basic_short }}"
    remote_src: true
    mode: "{{ item.mode }}"
  loop:
    - { path: "{{ existing_stats.results[0].stat.path }}", mode: '0644' }
    - { path: "{{ existing_stats.results[1].stat.path }}", mode: '0600' }
  when: existing_stats.results[0].stat.exists and existing_stats.results[1].stat.exists
