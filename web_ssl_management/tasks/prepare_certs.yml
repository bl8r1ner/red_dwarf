# web_ssl_management/tasks/prepare_certs.yml
---
- name: Ensure temp and backup directories exist
  file:
    path: "{{ item }}"
    state: directory
    mode: '0700'
    recurse: yes
  loop:
    - "{{ temp_dir }}"
    - "{{ backup_dir }}"

- name: Copy certificate ZIP to remote host # This task is commented out to see if unarchive will hold remote exec
  copy:
    src: "{{ cert_zip }}"
    dest: "{{ temp_zip_path }}"
    mode: '0600'

- name: Extract certificate ZIP
  unarchive:
    src: "{{ temp_zip_path }}"
    dest: "{{ temp_dir }}"
    remote_src: true

- name: Find SSL files
  find:
    paths: "{{ temp_dir }}"
    patterns: "{{ [cert_pattern, key_pattern, ca_cert_pattern] }}"
    recurse: true
  register: ssl_files

- name: Set facts for SSL files
  set_fact:
    cert_files: "{{ ssl_files.files | selectattr('path', 'match', cert_regex) | rejectattr('path', 'match', ca_cert_regex) | list }}"
    key_files: "{{ ssl_files.files | selectattr('path', 'match', key_regex) | list }}"
    ca_cert_file: "{{ ssl_files.files | selectattr('path', 'match', ca_cert_regex) | list }}"

- name: Validate SSL files
  assert:
    that:
      - cert_files | length == 1
      - key_files | length == 1
      - ca_cert_file | length == 1
    fail_msg: >
      Expected 1 cert (got {{ cert_files | length }}), 
      1 key (got {{ key_files | length }}), 
      1 intermediate (got {{ ca_cert_file | length }}) 
      in {{ temp_dir }}. 
      Found files: {{ ssl_files.files | map(attribute='path') | list }}

- name: Copy Root CA to remote host
  copy:
    src: "{{ root_ca_file_local }}"
    dest: "{{ root_ca_file_remote }}"
    mode: '0644'
    backup: true
  notify: Update CA trust
